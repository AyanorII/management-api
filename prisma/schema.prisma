// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Product {
  id              Int            @id @default(autoincrement())
  name            String         @unique
  price           Float
  cost            Float
  slug            String         @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  category        Category       @relation(fields: [categoryId], references: [id])
  categoryId      Int
  vendorProduct   VendorProduct? @relation(fields: [vendorProductId], references: [id])
  vendorProductId Int?           @unique
  productImages   ProductImage[]
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model VendorProduct {
  id        Int         @id @default(autoincrement())
  name      String
  price     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  vendor    Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId  Int
  Product   Product?
  OrderItem OrderItem[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Vendor {
  id             Int             @id @default(autoincrement())
  name           String
  phone          String?
  email          String?
  contact        String?
  website        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  vendorProducts VendorProduct[]
  Order          Order[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model User {
  id             Int             @id @default(autoincrement())
  companyName    String
  name           String
  email          String          @unique
  password       String
  refreshToken   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  products       Product[]
  productImages  ProductImage[]
  vendorProducts VendorProduct[]
  vendors        Vendor[]
  categories     Category[]
  employees      Employee[]
  orders         Order[]
  orderItems     OrderItem[]
}

enum Gender {
  MALE
  FEMALE
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  phone     String
  gender    Gender   @default(FEMALE)
  startedAt DateTime
  active    Boolean  @default(true)
  salary    Float
  photo     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Order {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  total      Float
  vendor     Vendor      @relation(fields: [vendorId], references: [id])
  vendorId   Int
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model OrderItem {
  id              Int           @id @default(autoincrement())
  quantity        Int
  subtotal        Float
  cost            Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         Int
  vendorProduct   VendorProduct @relation(fields: [vendorProductId], references: [id], onDelete: Cascade)
  vendorProductId Int
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
}
